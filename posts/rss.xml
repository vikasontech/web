<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vikas Java Blogs</title><link>https://vikasontech.github.io/web/</link><description>Sample java notes</description><atom:link href="https://vikasontech.github.io/web/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:vikason@gmail.com"&gt;Vikas Verma&lt;/a&gt; </copyright><lastBuildDate>Sun, 19 Jan 2020 08:01:18 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>spring+kotlin+mongo+testcontainer</title><link>https://vikasontech.github.io/web/posts/spring%2Bkotlin%2Bmongo%2Btestcontainer/</link><dc:creator>Vikas Verma</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this project we shall see how to use &lt;a class="reference external" href="https://www.testcontainers.org/"&gt;testcontainer&lt;/a&gt; to test the repository created in &lt;a class="reference external" href="https://www.mongodb.com/"&gt;mongodb&lt;/a&gt;. As per their document Testcontainers is a Java library that supports JUnit tests, providing lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prerequisit&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Docker&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Create sample project&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to the &lt;a class="reference external" href="http://start.spring.io/"&gt;spring initializer&lt;/a&gt; and create project with language as kotlin and dependencies required are &lt;cite&gt;webflux&lt;/cite&gt; &amp;amp; &lt;cite&gt;reactive mongo db&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Here we shall create a loan details application, where we will save loan details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependency for testcontainer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We need following depencies to add testconainer in the appliation
&lt;script src="https://gist.github.com/9870bb368b01f5a7ae07148efd2276f8.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;&lt;dependency&gt;
    &lt;groupid&gt;org.testcontainers&lt;/groupid&gt;
    &lt;artifactid&gt;testcontainers&lt;/artifactid&gt;
    &lt;version&gt;1.12.4&lt;/version&gt;
&lt;/dependency&gt;&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;strong&gt;Container Configuration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create docker compose file for the test container we shall use the same docker-compose.yml file as we are using for the application, except we shall change the port for the test docker container.
it should look like this-&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/3d2b48ee2c50a390c36a9d57cedb5386.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;version: '3.1'
services:
    mongo:
        image: mongo:4.2.0-rc2-bionic
        ports:
            - 1234:27017
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: example 
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;Note: here we are mapping docker container port at &lt;code class="docutils literal"&gt;1234&lt;/code&gt; some random port it can be any number that are available.&lt;/p&gt;
&lt;p&gt;The file path should be &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;src/test/resources/docker-compose-test.yml&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1. Create a container class that extends docker compose container class be used as mongo container
&lt;script src="https://gist.github.com/f4bc3ac99aa38cdfe130ff572c55f478.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@Service
class MongoContainer : DockerComposeContainer&lt;mongocontainer&gt;(File("src/test/resources/docker-compose-test.yml")) {
    @PostConstruct
    fun init() {
        this.start()
    }
}
&lt;/mongocontainer&gt;&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;The code is very simple and self explanatory, at &lt;code class="docutils literal"&gt;line:2&lt;/code&gt; we create a &lt;code class="docutils literal"&gt;DockerComposeContainer&lt;/code&gt; of type &lt;cite&gt;SELF&lt;/cite&gt; &lt;code class="docutils literal"&gt;MongoContainer&lt;/code&gt; and provide path of test docker compose file.&lt;/p&gt;
&lt;p&gt;We created it as a singleton repository and use &lt;code class="docutils literal"&gt;@PostConstruct&lt;/code&gt; to start the container once the dependency injection is done.&lt;/p&gt;
&lt;p&gt;That's all we need to start with testconatainer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create basic structure of the application&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a &lt;cite&gt;document&lt;/cite&gt; class to save in mongo
&lt;script src="https://gist.github.com/538fe51780ebe36103dd5f395b5b561d.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@Document
data class LoanDetail(var _id: String,
                      var loanAmount: BigDecimal,
                      var loanCommencedDate: LocalDate,
                      var interestRate: Float,
                      var numberOfEmi: Int,
                      var emiAmount: BigDecimal)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;Create an &lt;cite&gt;repository&lt;/cite&gt; to access data from the DB.
&lt;script src="https://gist.github.com/434440bacb6ae4c8b65d81024274e08f.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@Repository
interface LoanDetailRepo : ReactiveCrudRepository&lt;loandetail string&gt;
&lt;/loandetail&gt;&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;Create an &lt;cite&gt;service&lt;/cite&gt; class to access the loan details.
&lt;script src="https://gist.github.com/e0970e10dfc16f24195a8f932537a0dc.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@Service
class LoanDetailServiceImpl(private val loanDetailRepo:  LoanDetailRepo) : LoanDetailService {

    override fun save(loanDetail: LoanDetail): Mono&lt;loandetail&gt; {
        return loanDetailRepo.save(loanDetail)

    }
}&lt;/loandetail&gt;&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;strong&gt;Create first test case&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's create our first test case as below
&lt;script src="https://gist.github.com/a9bd4b673a792f94ca426d1ad988d981.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@RunWith(SpringRunner::class)
@SpringBootTest
class LoanDetailServiceImplTest {

    @Autowired
    private lateinit var loanDetailService: LoanDetailService

    @Test
    fun `save load detail service`() {
        StepVerifier.create(loanDetailService.save(LoanDetail(_id = "1", loanAmount = BigDecimal.valueOf(100000L),
            emiAmount = BigDecimal.valueOf(1000L),
            interestRate = 10F,
            loanCommencedDate = LocalDate.now(),
            numberOfEmi = 120)))
            .expectSubscription()
            .expectNextCount(1)
            .verifyComplete()
    }

}&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;The test case is preety normal and same we write. There is nothing special we need to do for testcontainers here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run Test&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before run local test do ensure that the docker is running on your machine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create repository and link &lt;a class="reference external" href="https://github.com/vikasontech/KotlinWebFluxMongoTestContainer.git/"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>kotlin</category><category>mongo</category><category>spring</category><category>testcontainer</category><guid>https://vikasontech.github.io/web/posts/spring%2Bkotlin%2Bmongo%2Btestcontainer/</guid><pubDate>Fri, 17 Jan 2020 17:42:49 GMT</pubDate></item><item><title>Add swagger to the kotlin spring </title><link>https://vikasontech.github.io/web/posts/add-swagger-to-the-kotlin-spring-boot-project/</link><dc:creator>Vikas Verma</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this short article we shall see how to configure swagger with spring webflux project. We create a project on spring initializer and then shall configure swagger.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a project on the spring boot initializer page with dependency as 'webflux' and language as 'java'&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200116/spring-initializer.png"&gt;&lt;img alt="spring initializer" src="https://vikasontech.github.io/web/images/20200116/spring-initializer.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;In order to work swagger with kotlin you need to add the following repositories in you pom.xml file.
&lt;script src="https://gist.github.com/a5dd22e084c90f46189bd5fdff5b03c6.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;        &lt;dependency&gt;
            &lt;groupid&gt;io.springfox&lt;/groupid&gt;
            &lt;artifactid&gt;springfox-swagger2&lt;/artifactid&gt;
	    &lt;version&gt;3.0.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupid&gt;io.springfox&lt;/groupid&gt;
            &lt;artifactid&gt;springfox-swagger-ui&lt;/artifactid&gt;
            &lt;version&gt;3.0.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupid&gt;io.springfox&lt;/groupid&gt;
            &lt;artifactid&gt;springfox-spring-webflux&lt;/artifactid&gt;
            &lt;version&gt;3.0.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;Since the swagger dependencyis available in another repository you need to add that repository as well in you 'pom.xml' file as below-
&lt;script src="https://gist.github.com/b53e428ae9ddfe5faeefe9882d36c89a.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;swagger1&lt;/id&gt;
            &lt;name&gt;swagger-snapshot&lt;/name&gt;
            &lt;url&gt;http://oss.jfrog.org/artifactory/oss-snapshot-local/&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;strong&gt;Setup swagger with kotlin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a class called 'SwaggerCofig' this class is responsible to configure Docket for our application as below
&lt;script src="https://gist.github.com/7fa314501ad66bc46ad2a00c04d356ec.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@Configuration
@EnableSwagger2WebFlux
class SwaggerConfig {

    @Bean
    fun api(): Docket =
            Docket(DocumentationType.SWAGGER_2)
                    .select()
                    .apis(RequestHandlerSelectors.basePackage("org.personal.finance.personalFinance.web"))
                    .paths(PathSelectors.any())
                    .build()

}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;at line no# 9 we set the path of the rest controllers, swagger will scan this package to pick the endpoints.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create a sample response object&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a simple &lt;cite&gt;LoanDetailFacade&lt;/cite&gt; that will contains the details about the loan.
&lt;script src="https://gist.github.com/538fe51780ebe36103dd5f395b5b561d.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@Document
data class LoanDetail(var _id: String,
                      var loanAmount: BigDecimal,
                      var loanCommencedDate: LocalDate,
                      var interestRate: Float,
                      var numberOfEmi: Int,
                      var emiAmount: BigDecimal)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;strong&gt;Create rest controller&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's the same as we do in spring web create some endpoints as below
&lt;script src="https://gist.github.com/9583ef4551ee379bc8f7a8f1e1fc2cb4.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@RestController
@RequestMapping("/api/v1/loan")
class LoanDetailController () {

	@GetMapping("/detail", produces = [MediaType.TEXT_EVENT_STREAM_VALUE])
	fun getdata():Mono&lt;loandetail&gt; {
		return Mono.justOrEmpty(
				LoanDetail(_id = "dummy",
						loanAmount = BigDecimal.valueOf(100_000L),
						emiAmount = BigDecimal.valueOf(1000L),
						interestRate = 10.00F,
						loanCommencedDate = LocalDate.now(),
						numberOfEmi = 180)
		)
	}
}&lt;/loandetail&gt;&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;strong&gt;Test Application&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To run the application use below commn
mvn spring-boot:run&lt;/p&gt;
&lt;p&gt;go to the url &lt;a class="reference external" href="http://localhost:8080/swagger-ui.html"&gt;http://localhost:8080/swagger-ui.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;the swagger page should show like this&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200116/swagger-ui.png"&gt;&lt;img alt="swagger ui example" src="https://vikasontech.github.io/web/images/20200116/swagger-ui.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The full source code is available here &lt;a class="reference external" href="https://github.com/vikasontech/kotlinWithSwagger"&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>kotlin</category><category>spring-boot</category><category>swagger</category><guid>https://vikasontech.github.io/web/posts/add-swagger-to-the-kotlin-spring-boot-project/</guid><pubDate>Thu, 16 Jan 2020 09:22:54 GMT</pubDate></item><item><title>Scala Mongo example with akka-http and akka-stream</title><link>https://vikasontech.github.io/web/posts/scala-mongo-example-with-akka-http-and-akka-stream/</link><dc:creator>Vikas Verma</dc:creator><description>&lt;div&gt;&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial we shall create and CRUD web application in Scala. We will use  &lt;a class="reference external" href="https://docs.mongodb.com/ecosystem/drivers/scala/"&gt;MongoDB Scala Driver&lt;/a&gt; to communicate to the mongo database. It is officially supported Scala driver for MongoDB. Along with that we shall create a Rest API using &lt;a class="reference external" href="https://doc.akka.io/docs/akka-http/current/index.html/"&gt;akka-http&lt;/a&gt; module and &lt;a class="reference external" href="https://doc.akka.io/docs/akka/current/stream/index.html/"&gt;akka-streams&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Scala version: 2.13.1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database: Mongo:3.4.23-xenial&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="other-dependencies"&gt;
&lt;h2&gt;Other dependencies -&lt;/h2&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/00a05c5c70722529d717f5908bb1d462.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;libraryDependencies ++= Seq(
  "com.typesafe.akka" %% "akka-actor" % "2.5.26",
  "com.typesafe.akka" %% "akka-http" % "10.1.11",
  "com.typesafe.akka" %% "akka-stream" % "2.5.26",
  "ch.rasc" % "bsoncodec" % "1.0.1",
  "org.mongodb.scala" %% "mongo-scala-driver" % "2.7.0",
  "com.typesafe.akka" %% "akka-http-spray-json" % "10.1.11"

)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="about-the-service-project"&gt;
&lt;h2&gt;About the service/project&lt;/h2&gt;
&lt;p&gt;Application should be able to do CRUD operations on the in mongodb document. This  application should also provide Rest apis to access and modify the data. So it is an employee management. We have employee details in a document called &lt;cite&gt;employee&lt;/cite&gt;. We will create reset services to create, update and search the employee data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="document-class"&gt;
&lt;h2&gt;Document Class&lt;/h2&gt;
&lt;p&gt;Employee document contains employee name and date of birth.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/d176859653575565b4870087c16cad22.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@Documented
case class Employee(_id: String, name: String, dateOfBirth: LocalDate)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="mongo-configuration"&gt;
&lt;h2&gt;Mongo Configuration&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Codec Registry&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mongo documents required the codec information for marshal and un-marshal the data. This codecs are already written and available here. This repository have codec implementations for most of the available types. So first create the the java codec as below -&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/a68ec9ac38a65c38b6449347350dcec1.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;  private val javaCodecs = CodecRegistries.fromCodecs(
    new LocalDateTimeDateCodec(),
    new BigDecimalStringCodec())

  private val registry: CodecRegistry = CodecRegistries.fromProviders(classOf[Employee])
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;In the above code &lt;cite&gt;Employee&lt;/cite&gt; is our mongo document class with the following details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Document Class&lt;/h2&gt;
&lt;p&gt;Employee document contains employee name and date of birth.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/d176859653575565b4870087c16cad22.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@Documented
case class Employee(_id: String, name: String, dateOfBirth: LocalDate)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="database-details"&gt;
&lt;h2&gt;Database Details&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;MongoClientSettings&lt;/cite&gt; is the companion object to configure the mongodb settings.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/ec33914a81f8f71d129cc9a16acf1e5b.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;private val javaCodecs = CodecRegistries.fromCodecs(
  new LocalDateTimeDateCodec(),
  new BigDecimalStringCodec())

val user: String = "root"
val password: Array[Char] = "example".toCharArray
val source: String = "admin"
private val credential: MongoCredential = createCredential(user, source, password)

val settings: MongoClientSettings = MongoClientSettings.builder()
    .applyToClusterSettings(b =&amp;gt; b.hosts(List(new ServerAddress("localhost")).asJava))
    .credential(credential)
    .codecRegistry(fromRegistries(registry, javaCodecs, DEFAULT_CODEC_REGISTRY))
    .build()

val client: MongoClient = MongoClient(settings)

val database: MongoDatabase = client.getDatabase("testdatabase")&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;In the above snippet; A Mongo client settings object is created that contains the configuration details for the connecting mongo database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="collection-details"&gt;
&lt;h2&gt;Collection Details&lt;/h2&gt;
&lt;p&gt;Collection details can be obtained from the database representation we get the previous step&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/aff2861b3333375066064d92d0848d43.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;  val employees: MongoCollection[Employee] = database.getCollection("employee")
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;This above step required for every collection to get the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="json-support"&gt;
&lt;h2&gt;JSON Support&lt;/h2&gt;
&lt;p&gt;We need formatter to format the date type to and from JSON format. We used Spray JSON here for this. Spray JSON providing automatic to and from JSON marshalling/un-marshalling using an in-scope &lt;em&gt;spray-json&lt;/em&gt; protocol.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/e1b4b26a815a05e97f286d145ccce28c.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;trait JsonUtils extends SprayJsonSupport with DefaultJsonProtocol {

  implicit object dateFormatter extends JsonFormat[LocalDate] {
    override def write(obj: LocalDate): JsValue = {
      JsString(obj.toString)
    }

    override def read(json: JsValue): LocalDate = {
      LocalDate.parse(json.toString(), DateTimeFormatter.ISO_DATE)
    }
  }
  implicit val employeeJsonFormatter: RootJsonFormat[Employee] = DefaultJsonProtocol.jsonFormat3(Employee)
  implicit val employeeRequestFormat: RootJsonFormat[EmployeeRequest] = jsonFormat2(EmployeeRequest)
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="repository"&gt;
&lt;h2&gt;Repository&lt;/h2&gt;
&lt;p&gt;Repository contains the create, update, delete and search commands for the employee document.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/a98e92e6ec7f07794cbfeab48fae3d22.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;
  def insertData(emp: Employee): Future[Completed] = {
    employeeDoc.insertOne(emp).toFuture()
  }

  def findAll(): Future[Seq[Employee]] = {
    employeeDoc.find().toFuture()
  }

  def update(emp: Employee, id: String):Future[Employee] = {

    employeeDoc
      .findOneAndUpdate(equal("_id", id),
        setBsonValue(emp),
        FindOneAndUpdateOptions().upsert(true)).toFuture()
  }

  def delete(id: String): Future[DeleteResult] = {
    employeeDoc.deleteOne(equal("_id", id)).toFuture()
  }

  private def setBsonValue(emp:Employee): Bson = {
    combine(
      set("name", emp.name),
      set("dateOfBirth",emp.dateOfBirth)
    )
  }&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="actors-to-get-the-user-data"&gt;
&lt;h2&gt;Actors to get the user data&lt;/h2&gt;
&lt;p&gt;Employee actor received messages to perform different operation on the employee document. Actor shall call the actual service and then send the responds to the sender.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/601add3fae9b2f44a93803da840f62a2.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;class EmployeeActor extends Actor with ActorLogging {
  private val employeeService: EmployeeService = new EmployeeService()

  override def receive: Receive = {

    case SAVE(employee: EmployeeRequest) =&amp;gt;
      log.info(s"received message Save with employee $employee")

      sender ! employeeService.saveEmployeeData(employee)

    case SEARCH_ALL =&amp;gt;
      log.info(s"received message find all")
      sender() ! employeeService.findAll

    case UPDATE(emp,id) =&amp;gt;
      log.info(s"received message find all")
      sender() ! employeeService.update(emp,id)

    case DELETE(id)=&amp;gt;
      log.info(s"delete message received for the id: $id")
      sender() ! employeeService.delete(id)

    case _ =&amp;gt;
      log.debug("Unhandled message!")
  }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="routing-configuration"&gt;
&lt;h2&gt;Routing Configuration&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 51%"&gt;
&lt;col style="width: 49%"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;GET /api/employee/create&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To create employee data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;POST /api/employee/search&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To search employee data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;PUT /api/employee/update&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To update employee data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;DELETE /api/employee/delete&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To delete user data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The routing code should look like this-&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/448b06903269273a7d6439726badad71.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;class EmployeeRouteConfig(implicit val system: ActorSystem) extends JsonUtils {
  val employeeActor: ActorRef = system.actorOf(Props(new EmployeeActor()))

  implicit val mat: ActorMaterializer = ActorMaterializer()


  val getRoute: Route =

    PathDirectives.pathPrefix("employee") {
      concat(
        path("create") {
          post {
            entity(as[EmployeeRequest]) { employee =&amp;gt;
              val future = Patterns.ask(employeeActor, SAVE(employee), TimeUtils.timeoutMills)
              Await.result(future, TimeUtils.atMostDuration)
              RouteDirectives.complete(HttpEntity("Data saved successfully!"))
            }
          }
        },

        path("search") {
          get {
            val resultFuture = Patterns.ask(employeeActor, SEARCH_ALL, TimeUtils.timeoutMills)
            val resultSource = Await.result(resultFuture, TimeUtils.atMostDuration).asInstanceOf[Source[Employee, NotUsed]]
            val resultByteString = resultSource.map { it =&amp;gt; ByteString.apply(it.toJson.toString.getBytes()) }
            RouteDirectives.complete(HttpEntity(ContentTypes.`text/plain(UTF-8)`, resultByteString))
          }
        },

        path("update") {
          put {
            parameter("id") { id =&amp;gt;
              entity(as[EmployeeRequest]) { employee =&amp;gt;
                val future = Patterns.ask(employeeActor, UPDATE(employee, id), TimeUtils.timeoutMills)
                Await.result(future, TimeUtils.atMostDuration)
                RouteDirectives.complete(HttpEntity("Data updated saved successfully!"))
              }
            }
          }
        },

        path("delete") {
          delete {
            parameter("id") { id =&amp;gt;
              val resultFuture = Patterns.ask(employeeActor, DELETE(id), TimeUtils.timeoutMills)
              Await.result(resultFuture, TimeUtils.atMostDuration)
              RouteDirectives.complete(HttpEntity(s"Data updated saved successfully!"))
            }
          }
        }
      )
    }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="web-server"&gt;
&lt;h2&gt;Web Server&lt;/h2&gt;
&lt;p&gt;This class is used to create http server and bind the endpoints with the http server. You can get more information in &lt;a class="reference external" href="http://bit.ly/scalaakkarest/"&gt;my previous blog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="run-application"&gt;
&lt;h2&gt;Run Application&lt;/h2&gt;
&lt;p&gt;Start the mongodb docker container&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;docker-compose up -d&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Compile the code using below command&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;sbt compile&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Run the application&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;sbt run&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Now go to terminal, and run below &lt;a class="reference external" href="https://httpie.org//"&gt;httpie&lt;/a&gt; commands&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-employee-data"&gt;
&lt;h2&gt;Create Employee Data&lt;/h2&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/create-employee-data.png"&gt;&lt;img alt="create employee" src="https://vikasontech.github.io/web/images/20200119/create-employee-data.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="search-employee-data"&gt;
&lt;h2&gt;Search Employee Data&lt;/h2&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/searchEmployeeData.png"&gt;&lt;img alt="search employee" src="https://vikasontech.github.io/web/images/20200119/searchEmployeeData.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="update-employee-data"&gt;
&lt;h2&gt;Update Employee Data&lt;/h2&gt;
&lt;p&gt;Check current data in mongodb&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/currentDataInMongo.png"&gt;&lt;img alt="data in database" src="https://vikasontech.github.io/web/images/20200119/currentDataInMongo.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;Update the data by id&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/updateDataById.png"&gt;&lt;img alt="update data by id" src="https://vikasontech.github.io/web/images/20200119/updateDataById.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;Search data after update&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/searchDataAfterUpdate.png"&gt;&lt;img alt="search data in database" src="https://vikasontech.github.io/web/images/20200119/searchDataAfterUpdate.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="delete-employee-data"&gt;
&lt;h2&gt;Delete Employee data&lt;/h2&gt;
&lt;p&gt;Search employee data&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/searchDeleteEmployeeData.png"&gt;&lt;img alt="search data in database" src="https://vikasontech.github.io/web/images/20200119/searchDeleteEmployeeData.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;Delete employee data using id&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/deleteEmployeeDataById.png"&gt;&lt;img alt="delete data in database" src="https://vikasontech.github.io/web/images/20200119/deleteEmployeeDataById.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;Search data after delete&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/searchDataAfterDelete.png"&gt;&lt;img alt="search data in database" src="https://vikasontech.github.io/web/images/20200119/searchDataAfterDelete.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="github-links"&gt;
&lt;h2&gt;Github links&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bit.ly/scala-mongo-crud/"&gt;Full code is available here&lt;/a&gt; to to explore and fork. Feel free to do whatever you want. ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We have seen here how to use akka http and streams to create rest services in scala. You can get more information here -
&lt;a class="reference external" href="https://doc.akka.io/docs/akka-http/current/introduction.html"&gt;https://doc.akka.io/docs/akka-http/current/introduction.html&lt;/a&gt;
&lt;a class="reference external" href="https://doc.akka.io/docs/akka/current/stream/index.html"&gt;https://doc.akka.io/docs/akka/current/stream/index.html&lt;/a&gt;
&lt;a class="reference external" href="https://docs.mongodb.com/ecosystem/drivers/scala/"&gt;https://docs.mongodb.com/ecosystem/drivers/scala/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>akka</category><category>akka-http</category><category>docker</category><category>sbt</category><category>scala</category><category>scala example</category><guid>https://vikasontech.github.io/web/posts/scala-mongo-example-with-akka-http-and-akka-stream/</guid><pubDate>Mon, 23 Dec 2019 09:22:54 GMT</pubDate></item><item><title>Scala Rest API with akka-http</title><link>https://vikasontech.github.io/web/posts/scala-rest-api-with-akka-http/</link><dc:creator>Vikas Verma</dc:creator><description>&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial we shall explore how we can use akka-http to create service with scala. Here we create CRUD service with akka actor and try to see how it work.&lt;/p&gt;
&lt;div class="section" id="versions"&gt;
&lt;h3&gt;Versions&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Scala version: 2.13.1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SBT version: 1.3.4&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="other-dependencies"&gt;
&lt;h3&gt;Other dependencies -&lt;/h3&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/c6216874027f683731f5d61e2e65de25.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;scalaVersion := "2.13.1"

libraryDependencies ++= Seq(
  "com.typesafe.akka" %% "akka-actor" % "2.5.26",
  "com.typesafe.akka" %% "akka-http" % "10.1.11",
  "com.typesafe.akka" %% "akka-stream" % "2.5.26",
  "com.typesafe.akka" %% "akka-http-spray-json" % "10.1.11",
)&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="about-the-service-project"&gt;
&lt;h3&gt;About the service/project&lt;/h3&gt;
&lt;p&gt;Weâll create two actors that communicate with each other to get the user data and user activity data.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20191210/aboutService.png"&gt;&lt;img alt="output of the application" src="https://vikasontech.github.io/web/images/20191210/aboutService.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="data-classes"&gt;
&lt;h3&gt;Data Classes&lt;/h3&gt;
&lt;p&gt;We need two data classes that keeps the user data and user activity data.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/dc9497796aa9855cf8fe089a810894e8.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;// holds user data
case class UserData(data: String)

// holds user activity data
case class UserActitity(activity: String)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="repository"&gt;
&lt;h3&gt;Repository&lt;/h3&gt;
&lt;p&gt;Repositories are used to fetch the data from the actual source of data. The actual source can be anything like another service or some database. We created &lt;cite&gt;UserActivityRepository&lt;/cite&gt; that have only one method &lt;cite&gt;queryHistoricalActivities&lt;/cite&gt; to fetch the user activity by &lt;cite&gt;userId&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/fb883120dd64646f88f04561b9c7e10b.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;import scala.concurrent.Future

trait UserActivityRepository {
  def queryHistoricalActivities(userId: String):
  Future[List[UserActivity]]
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="actors-to-get-user-data"&gt;
&lt;h3&gt;Actors to get user data&lt;/h3&gt;
&lt;p&gt;We need two actor classes for &lt;cite&gt;UserDataActor&lt;/cite&gt; and &lt;cite&gt;UserActivityActor&lt;/cite&gt;. &lt;cite&gt;UserDataActor&lt;/cite&gt; received 4 types of methods &lt;cite&gt;Get&lt;/cite&gt;, &lt;cite&gt;Post&lt;/cite&gt;,`Put` and &lt;cite&gt;Delete&lt;/cite&gt; to retrieve, create, update and delete the user data respectively.  Once a message received, User data will be sent to the sender asynchronously.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/98e637ea820c6e696a67243fb84d5d14.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;object UserDataActor {
  case object Get
  case object Post
  case object Put
  case object Delete
}

//Backend Service
class UserDataActor extends Actor {

  import UserDataActor._

  override def receive: Receive = {

    case Get =&amp;gt;
      sender() ! UserData("data Searched")
    case Post =&amp;gt;
      sender() ! UserData("data created!")
    case Put =&amp;gt;
      sender () ! UserData("data updated!")
    case Delete =&amp;gt;
      sender () ! UserData("data deleted!")
  }
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;cite&gt;UserActivityActor&lt;/cite&gt; retrieve the user active once it receives the message &lt;cite&gt;Get&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/50758577160dddd78cd34261e6c08723.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;object UserActivityActor {
  case object Get
}

class UserActivityActor(val userId: String,
                        implicit val repository: UserActivityRepository)
  extends Actor {

  implicit val ec: ExecutionContextExecutor = context.dispatcher


  override def receive: Receive = {
    case Get =&amp;gt;
      repository.queryHistoricalActivities(userId) pipeTo sender
  }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="routing-configuration"&gt;
&lt;h3&gt;Routing Configuration&lt;/h3&gt;
&lt;p&gt;Now, we need to create routing details, to access the user details from rest endpoints. We needs following endpoints&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 32%"&gt;
&lt;col style="width: 6%"&gt;
&lt;col style="width: 62%"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;GET /api/users/activity&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;=&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Retrieve user and its activity details.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;POST /api/user&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;=&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To create user data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;PUT /api/user&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;=&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To update user data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;DELETE /api/user&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;=&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To delete user data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Routing code looks like below -&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/5c464a8b0b5e278107267ba0d4d38308.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;

class RouteConfig(implicit val userDataActorRef: ActorRef,
                  implicit val system: ActorSystem) {
  val timeoutMills: Long = 2 * 1000


  val getRoute: Route =

    PathDirectives.pathPrefix("user"){
      path("activity") {
        get {

          val userData = findData(UserDataActor.Get)

          val userActivityActorRef: ActorRef =
            system.actorOf(Props(new UserActivityActor(userData.data, new UserActivityRepositoryImpl())))

          val activity: UserActivity = findUserActivityData(userActivityActorRef)
          RouteDirectives.complete(HttpEntity(activity.toString))
        }
      }
    }

  private def findUserActivityData(userActivityActorRef: ActorRef) = {
    val resultFuture = Patterns.ask(userActivityActorRef, UserActivityActor.Get, timeoutMills)
    val result: List[UserActivity] = Await.result(resultFuture, Duration.create(2, TimeUnit.SECONDS)).asInstanceOf[List[UserActivity]]
    val activity: UserActivity = result.head
    activity
  }

  val postRoute: Route = path("user") {
    post {
      //TODO: DO SOME OPERATION TO SAVE USER DATA
      executeActorAndSearchData(UserDataActor.Post)
    }
  }

  val deleteRoute: Route = path("user") {
    delete {
      //TODO: DO SOME OPERATION TO DELETE USER DATA
      executeActorAndSearchData(UserDataActor.Delete)
    }
  }

  val putRoute: Route = path("user") {
    put {
      //TODO: DO SOME OPERATION TO UPDATE USER DATA
      executeActorAndSearchData(UserDataActor.Put)
    }
  }

  val executeActorAndSearchData: Any =&amp;gt; StandardRoute = (message: Any) =&amp;gt; {
    val result: UserData = findData(message)
    RouteDirectives.complete(HttpEntity(result.data))
  }

  private def findData(message: Any) = {
    val resultFuture = Patterns.ask(userDataActorRef, message, timeoutMillis = timeoutMills)
    val result: UserData = Await.result(resultFuture, Duration.create(2, TimeUnit.SECONDS)).asInstanceOf[UserData]
    result
  }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;We have two &lt;cite&gt;implicit&lt;/cite&gt; parameters in the routing config &lt;cite&gt;implicit val userDataActorRef: ActorRef&lt;/cite&gt; and &lt;cite&gt;implicit val system: ActorSystem&lt;/cite&gt;. &lt;cite&gt;userDataActorRef&lt;/cite&gt; is used to get the user data. Since user details is required to register &lt;cite&gt;UserActivityActor&lt;/cite&gt; we use actor system and implicit parameter to register &lt;cite&gt;UserActivityActor&lt;/cite&gt; when we have user information available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web-server"&gt;
&lt;h3&gt;Web Server&lt;/h3&gt;
&lt;p&gt;This class is used to create http server and bind the endpoints with the http server.
&lt;script src="https://gist.github.com/bbb78c7509bda0d3597eb3a8b135a954.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;
package org

import akka.actor.{ActorRef, ActorSystem, Props}
import akka.http.scaladsl.Http
import akka.http.scaladsl.server.Directives._
import akka.http.scaladsl.server.directives.PathDirectives.pathPrefix
import akka.stream.ActorMaterializer
import org.user.actor.UserDataActor
import org.user.repositories.UserActivityRepositoryImpl

import scala.concurrent.ExecutionContextExecutor
import scala.io.StdIn

object WebServer extends App {
    implicit val system: ActorSystem = ActorSystem("web-app")
    private implicit val dispatcher: ExecutionContextExecutor = system.dispatcher
    private implicit val materialize: ActorMaterializer = ActorMaterializer()

    implicit val userActivityRepo = new UserActivityRepositoryImpl()
    implicit val userDataActorRef: ActorRef = system.actorOf(Props(new UserDataActor()))

    private val routeConfig = new RouteConfig()
    val routes = {
        pathPrefix("api") {
            concat(
                    routeConfig.getRoute,
                    routeConfig.postRoute,
                    routeConfig.deleteRoute,
                    routeConfig.putRoute
            )
        }
    }
    val serverFuture = Http().bindAndHandle(routes, "localhost", 8080)

    println("Server started ...")
    StdIn.readLine()
    serverFuture
            .flatMap(_.unbind())
            .onComplete(_ =&amp;gt; system.terminate())
&lt;/pre&gt;&lt;/noscript&gt;
&lt;div class="section" id="run-application"&gt;
&lt;h4&gt;Run Application&lt;/h4&gt;
&lt;p&gt;Compile the code using below command&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;sbt compile&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="run-the-application"&gt;
&lt;h4&gt;Run the application&lt;/h4&gt;
&lt;p&gt;&lt;cite&gt;sbt run&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Now go to terminal, and run below httpie scripts&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20191210/output.png"&gt;&lt;img alt="output of the application" src="https://vikasontech.github.io/web/images/20191210/output.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="github-links"&gt;
&lt;h3&gt;Github links&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bit.ly/2rzPmYH/"&gt;Full code is available here&lt;/a&gt; to to explore and fork. Feel free to do whatever you want. ;)
Conclusion
We have seen here itâs easy to create rest services with akka and scala. You can get more information at
&lt;a class="reference external" href="https://doc.akka.io/docs/akka-http/current/introduction.html/"&gt;akka-http official document&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>akka</category><category>akka-http</category><category>rest service</category><category>sbt</category><category>scala</category><category>scala example</category><category>web service</category><guid>https://vikasontech.github.io/web/posts/scala-rest-api-with-akka-http/</guid><pubDate>Tue, 10 Dec 2019 07:15:17 GMT</pubDate></item></channel></rss>