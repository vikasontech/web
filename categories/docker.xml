<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vikas Java Blogs (Posts about docker)</title><link>https://vikasontech.github.io/web/</link><description></description><atom:link href="https://vikasontech.github.io/web/categories/docker.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:vikason@gmail.com"&gt;Vikas Verma&lt;/a&gt; </copyright><lastBuildDate>Fri, 20 Mar 2020 12:02:30 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Scala Mongo example with akka-http and akka-stream</title><link>https://vikasontech.github.io/web/posts/scala-mongo-example-with-akka-http-and-akka-stream/</link><dc:creator>Vikas Verma</dc:creator><description>&lt;div&gt;&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial we shall create and CRUD web application in Scala. We will use  &lt;a class="reference external" href="https://docs.mongodb.com/ecosystem/drivers/scala/"&gt;MongoDB Scala Driver&lt;/a&gt; to communicate to the mongo database. It is officially supported Scala driver for MongoDB. Along with that we shall create a Rest API using &lt;a class="reference external" href="https://doc.akka.io/docs/akka-http/current/index.html/"&gt;akka-http&lt;/a&gt; module and &lt;a class="reference external" href="https://doc.akka.io/docs/akka/current/stream/index.html/"&gt;akka-streams&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Scala version: 2.13.1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database: Mongo:3.4.23-xenial&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="other-dependencies"&gt;
&lt;h2&gt;Other dependencies -&lt;/h2&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/00a05c5c70722529d717f5908bb1d462.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;libraryDependencies ++= Seq(
  "com.typesafe.akka" %% "akka-actor" % "2.5.26",
  "com.typesafe.akka" %% "akka-http" % "10.1.11",
  "com.typesafe.akka" %% "akka-stream" % "2.5.26",
  "ch.rasc" % "bsoncodec" % "1.0.1",
  "org.mongodb.scala" %% "mongo-scala-driver" % "2.7.0",
  "com.typesafe.akka" %% "akka-http-spray-json" % "10.1.11"

)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="about-the-service-project"&gt;
&lt;h2&gt;About the service/project&lt;/h2&gt;
&lt;p&gt;Application should be able to do CRUD operations on the in mongodb document. This  application should also provide Rest apis to access and modify the data. So it is an employee management. We have employee details in a document called &lt;cite&gt;employee&lt;/cite&gt;. We will create reset services to create, update and search the employee data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="document-class"&gt;
&lt;h2&gt;Document Class&lt;/h2&gt;
&lt;p&gt;Employee document contains employee name and date of birth.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/d176859653575565b4870087c16cad22.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@Documented
case class Employee(_id: String, name: String, dateOfBirth: LocalDate)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="mongo-configuration"&gt;
&lt;h2&gt;Mongo Configuration&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Codec Registry&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mongo documents required the codec information for marshal and un-marshal the data. This codecs are already written and available here. This repository have codec implementations for most of the available types. So first create the the java codec as below -&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/a68ec9ac38a65c38b6449347350dcec1.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;  private val javaCodecs = CodecRegistries.fromCodecs(
    new LocalDateTimeDateCodec(),
    new BigDecimalStringCodec())

  private val registry: CodecRegistry = CodecRegistries.fromProviders(classOf[Employee])
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;In the above code &lt;cite&gt;Employee&lt;/cite&gt; is our mongo document class with the following details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Document Class&lt;/h2&gt;
&lt;p&gt;Employee document contains employee name and date of birth.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/d176859653575565b4870087c16cad22.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@Documented
case class Employee(_id: String, name: String, dateOfBirth: LocalDate)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="database-details"&gt;
&lt;h2&gt;Database Details&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;MongoClientSettings&lt;/cite&gt; is the companion object to configure the mongodb settings.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/ec33914a81f8f71d129cc9a16acf1e5b.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;private val javaCodecs = CodecRegistries.fromCodecs(
  new LocalDateTimeDateCodec(),
  new BigDecimalStringCodec())

val user: String = "root"
val password: Array[Char] = "example".toCharArray
val source: String = "admin"
private val credential: MongoCredential = createCredential(user, source, password)

val settings: MongoClientSettings = MongoClientSettings.builder()
    .applyToClusterSettings(b =&amp;gt; b.hosts(List(new ServerAddress("localhost")).asJava))
    .credential(credential)
    .codecRegistry(fromRegistries(registry, javaCodecs, DEFAULT_CODEC_REGISTRY))
    .build()

val client: MongoClient = MongoClient(settings)

val database: MongoDatabase = client.getDatabase("testdatabase")&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;In the above snippet; A Mongo client settings object is created that contains the configuration details for the connecting mongo database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="collection-details"&gt;
&lt;h2&gt;Collection Details&lt;/h2&gt;
&lt;p&gt;Collection details can be obtained from the database representation we get the previous step&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/aff2861b3333375066064d92d0848d43.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;  val employees: MongoCollection[Employee] = database.getCollection("employee")
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;This above step required for every collection to get the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="json-support"&gt;
&lt;h2&gt;JSON Support&lt;/h2&gt;
&lt;p&gt;We need formatter to format the date type to and from JSON format. We used Spray JSON here for this. Spray JSON providing automatic to and from JSON marshalling/un-marshalling using an in-scope &lt;em&gt;spray-json&lt;/em&gt; protocol.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/e1b4b26a815a05e97f286d145ccce28c.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;trait JsonUtils extends SprayJsonSupport with DefaultJsonProtocol {

  implicit object dateFormatter extends JsonFormat[LocalDate] {
    override def write(obj: LocalDate): JsValue = {
      JsString(obj.toString)
    }

    override def read(json: JsValue): LocalDate = {
      LocalDate.parse(json.toString(), DateTimeFormatter.ISO_DATE)
    }
  }
  implicit val employeeJsonFormatter: RootJsonFormat[Employee] = DefaultJsonProtocol.jsonFormat3(Employee)
  implicit val employeeRequestFormat: RootJsonFormat[EmployeeRequest] = jsonFormat2(EmployeeRequest)
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="repository"&gt;
&lt;h2&gt;Repository&lt;/h2&gt;
&lt;p&gt;Repository contains the create, update, delete and search commands for the employee document.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/a98e92e6ec7f07794cbfeab48fae3d22.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;
  def insertData(emp: Employee): Future[Completed] = {
    employeeDoc.insertOne(emp).toFuture()
  }

  def findAll(): Future[Seq[Employee]] = {
    employeeDoc.find().toFuture()
  }

  def update(emp: Employee, id: String):Future[Employee] = {

    employeeDoc
      .findOneAndUpdate(equal("_id", id),
        setBsonValue(emp),
        FindOneAndUpdateOptions().upsert(true)).toFuture()
  }

  def delete(id: String): Future[DeleteResult] = {
    employeeDoc.deleteOne(equal("_id", id)).toFuture()
  }

  private def setBsonValue(emp:Employee): Bson = {
    combine(
      set("name", emp.name),
      set("dateOfBirth",emp.dateOfBirth)
    )
  }&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="actors-to-get-the-user-data"&gt;
&lt;h2&gt;Actors to get the user data&lt;/h2&gt;
&lt;p&gt;Employee actor received messages to perform different operation on the employee document. Actor shall call the actual service and then send the responds to the sender.&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/601add3fae9b2f44a93803da840f62a2.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;class EmployeeActor extends Actor with ActorLogging {
  private val employeeService: EmployeeService = new EmployeeService()

  override def receive: Receive = {

    case SAVE(employee: EmployeeRequest) =&amp;gt;
      log.info(s"received message Save with employee $employee")

      sender ! employeeService.saveEmployeeData(employee)

    case SEARCH_ALL =&amp;gt;
      log.info(s"received message find all")
      sender() ! employeeService.findAll

    case UPDATE(emp,id) =&amp;gt;
      log.info(s"received message find all")
      sender() ! employeeService.update(emp,id)

    case DELETE(id)=&amp;gt;
      log.info(s"delete message received for the id: $id")
      sender() ! employeeService.delete(id)

    case _ =&amp;gt;
      log.debug("Unhandled message!")
  }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="routing-configuration"&gt;
&lt;h2&gt;Routing Configuration&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 51%"&gt;
&lt;col style="width: 49%"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;GET /api/employee/create&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To create employee data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;POST /api/employee/search&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To search employee data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;PUT /api/employee/update&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To update employee data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;DELETE /api/employee/delete&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To delete user data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The routing code should look like this-&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/448b06903269273a7d6439726badad71.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;class EmployeeRouteConfig(implicit val system: ActorSystem) extends JsonUtils {
  val employeeActor: ActorRef = system.actorOf(Props(new EmployeeActor()))

  implicit val mat: ActorMaterializer = ActorMaterializer()


  val getRoute: Route =

    PathDirectives.pathPrefix("employee") {
      concat(
        path("create") {
          post {
            entity(as[EmployeeRequest]) { employee =&amp;gt;
              val future = Patterns.ask(employeeActor, SAVE(employee), TimeUtils.timeoutMills)
              Await.result(future, TimeUtils.atMostDuration)
              RouteDirectives.complete(HttpEntity("Data saved successfully!"))
            }
          }
        },

        path("search") {
          get {
            val resultFuture = Patterns.ask(employeeActor, SEARCH_ALL, TimeUtils.timeoutMills)
            val resultSource = Await.result(resultFuture, TimeUtils.atMostDuration).asInstanceOf[Source[Employee, NotUsed]]
            val resultByteString = resultSource.map { it =&amp;gt; ByteString.apply(it.toJson.toString.getBytes()) }
            RouteDirectives.complete(HttpEntity(ContentTypes.`text/plain(UTF-8)`, resultByteString))
          }
        },

        path("update") {
          put {
            parameter("id") { id =&amp;gt;
              entity(as[EmployeeRequest]) { employee =&amp;gt;
                val future = Patterns.ask(employeeActor, UPDATE(employee, id), TimeUtils.timeoutMills)
                Await.result(future, TimeUtils.atMostDuration)
                RouteDirectives.complete(HttpEntity("Data updated saved successfully!"))
              }
            }
          }
        },

        path("delete") {
          delete {
            parameter("id") { id =&amp;gt;
              val resultFuture = Patterns.ask(employeeActor, DELETE(id), TimeUtils.timeoutMills)
              Await.result(resultFuture, TimeUtils.atMostDuration)
              RouteDirectives.complete(HttpEntity(s"Data updated saved successfully!"))
            }
          }
        }
      )
    }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="section" id="web-server"&gt;
&lt;h2&gt;Web Server&lt;/h2&gt;
&lt;p&gt;This class is used to create http server and bind the endpoints with the http server. You can get more information in &lt;a class="reference external" href="http://bit.ly/scalaakkarest/"&gt;my previous blog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="run-application"&gt;
&lt;h2&gt;Run Application&lt;/h2&gt;
&lt;p&gt;Start the mongodb docker container&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;docker-compose up -d&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Compile the code using below command&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;sbt compile&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Run the application&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;sbt run&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Now go to terminal, and run below &lt;a class="reference external" href="https://httpie.org//"&gt;httpie&lt;/a&gt; commands&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-employee-data"&gt;
&lt;h2&gt;Create Employee Data&lt;/h2&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/create-employee-data.png"&gt;&lt;img alt="create employee" src="https://vikasontech.github.io/web/images/20200119/create-employee-data.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="search-employee-data"&gt;
&lt;h2&gt;Search Employee Data&lt;/h2&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/searchEmployeeData.png"&gt;&lt;img alt="search employee" src="https://vikasontech.github.io/web/images/20200119/searchEmployeeData.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="update-employee-data"&gt;
&lt;h2&gt;Update Employee Data&lt;/h2&gt;
&lt;p&gt;Check current data in mongodb&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/currentDataInMongo.png"&gt;&lt;img alt="data in database" src="https://vikasontech.github.io/web/images/20200119/currentDataInMongo.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;Update the data by id&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/updateDataById.png"&gt;&lt;img alt="update data by id" src="https://vikasontech.github.io/web/images/20200119/updateDataById.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;Search data after update&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/searchDataAfterUpdate.png"&gt;&lt;img alt="search data in database" src="https://vikasontech.github.io/web/images/20200119/searchDataAfterUpdate.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="delete-employee-data"&gt;
&lt;h2&gt;Delete Employee data&lt;/h2&gt;
&lt;p&gt;Search employee data&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/searchDeleteEmployeeData.png"&gt;&lt;img alt="search data in database" src="https://vikasontech.github.io/web/images/20200119/searchDeleteEmployeeData.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;Delete employee data using id&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/deleteEmployeeDataById.png"&gt;&lt;img alt="delete data in database" src="https://vikasontech.github.io/web/images/20200119/deleteEmployeeDataById.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;Search data after delete&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200119/searchDataAfterDelete.png"&gt;&lt;img alt="search data in database" src="https://vikasontech.github.io/web/images/20200119/searchDataAfterDelete.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="github-links"&gt;
&lt;h2&gt;Github links&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bit.ly/scala-mongo-crud/"&gt;Full code is available here&lt;/a&gt; to to explore and fork. Feel free to do whatever you want. ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We have seen here how to use akka http and streams to create rest services in scala. You can get more information here -
&lt;a class="reference external" href="https://doc.akka.io/docs/akka-http/current/introduction.html"&gt;https://doc.akka.io/docs/akka-http/current/introduction.html&lt;/a&gt;
&lt;a class="reference external" href="https://doc.akka.io/docs/akka/current/stream/index.html"&gt;https://doc.akka.io/docs/akka/current/stream/index.html&lt;/a&gt;
&lt;a class="reference external" href="https://docs.mongodb.com/ecosystem/drivers/scala/"&gt;https://docs.mongodb.com/ecosystem/drivers/scala/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>akka</category><category>akka-http</category><category>docker</category><category>sbt</category><category>scala</category><category>scala example</category><guid>https://vikasontech.github.io/web/posts/scala-mongo-example-with-akka-http-and-akka-stream/</guid><pubDate>Mon, 23 Dec 2019 09:22:54 GMT</pubDate></item><item><title>Setup Keycloak with Docker</title><link>https://vikasontech.github.io/web/posts/setup-keycloak-with-docker/</link><dc:creator>Vikas Verma</dc:creator><description>&lt;div&gt;&lt;div class="section" id="introduction-of-keycloak"&gt;
&lt;h2&gt;&lt;strong&gt;Introduction of Keycloak&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Open Source Identity and Access Management For Modern Applications and Services. It add authentication to applications and secure services with minimum fuss. No need to deal with storing users or authenticating users. It's all available out of the box.&lt;/p&gt;
&lt;p&gt;You'll even get advanced features such as User Federation, Identity Brokering and Social Login.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Docker:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since we are using Docker to install Keycloak; it should be installed on your machine. If it is not you can download and install it from the link given below, itâs pretty straight forward.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.docker.com/docker-for-mac/"&gt;Mac/Linux&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.docker.com/docker-for-windows/install/"&gt;Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Create docker compose file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We use keycloak with mysql database to persist the user data.
Use the below docker-compose.yml file to pull and start the docker server
docker-compose.yml&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/24c4ca4ec051b0ad22a912f19807a06a.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;version: '3'
services:
  mysql:
    image: mysql:5.6.34
    networks:
      - keycloak-network
    environment:
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root_password
    volumes:
      - ./dump:/docker-entrypoint-initdb.d


  keycloak:
    image: jboss/keycloak
    depends_on:
      - mysql
    networks:
      - keycloak-network
    ports:
      - 9001:8080
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin

networks:
  keycloak-network:
~                             &lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;In docker compose file we povide default user name and password for the keycloak use and described in the docker hub for the keycloak image.
Our mysql and keycloak server are running on the docker network âKeycloak-networkâ.
Start keycloak and mysql server&lt;/p&gt;
&lt;p&gt;Run &lt;cite&gt;docker-compose up&lt;/cite&gt; command on the terminal, once the server up you can see the output as below -&lt;/p&gt;
&lt;img alt="https://1.bp.blogspot.com/-YjgKqAuohoQ/W_-ZIs5DHbI/AAAAAAAAkRo/ZLgbb5qaDrY0Pol1uuei7rrlqVUhXwjNACEwYBhgL/s320/Screen%2BShot%2B2561-11-29%2Bat%2B14.44.31.png" src="https://1.bp.blogspot.com/-YjgKqAuohoQ/W_-ZIs5DHbI/AAAAAAAAkRo/ZLgbb5qaDrY0Pol1uuei7rrlqVUhXwjNACEwYBhgL/s320/Screen%2BShot%2B2561-11-29%2Bat%2B14.44.31.png" style="width: 600.0px; height: 50.0px;"&gt;
&lt;p&gt;Go the browser and type the url - &lt;cite&gt;http: //localhost:9001&lt;/cite&gt; Note: remember we expose the port in the docker-compose file&lt;/p&gt;
&lt;img alt="https://lh3.googleusercontent.com/XF8uOYI14dqFc6ns-PLgc_ewrxjIfryAwHofSAFKVA-dWe2FWzQ5Csu-24PAtvTszqOOXD_PZBSG5RtI4yH7JqAxvgCe-GhoGbnfV2b-xTZ0gpTd_KgDF1oAnw5UthP2WfLHfzOV" src="https://lh3.googleusercontent.com/XF8uOYI14dqFc6ns-PLgc_ewrxjIfryAwHofSAFKVA-dWe2FWzQ5Csu-24PAtvTszqOOXD_PZBSG5RtI4yH7JqAxvgCe-GhoGbnfV2b-xTZ0gpTd_KgDF1oAnw5UthP2WfLHfzOV" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;You can now login keycloak from the username and password you provided in docker-compose file. In our case we use username &lt;cite&gt;admin&lt;/cite&gt; and password also &lt;cite&gt;admin&lt;/cite&gt;&lt;/p&gt;
&lt;img alt="https://lh5.googleusercontent.com/fBLFQeZcVyS_khIBWcdkQQCS_XutZeIhoW8XfCQDpOEovXz63dqaHpqWF80l4HYi7BhhqtGgPv9bsGlIv3dXqG0b3LMDhV6hcRawFpWizRdMdYSdCNq2CKUl8MMbmYp7R3GDvhrm" src="https://lh5.googleusercontent.com/fBLFQeZcVyS_khIBWcdkQQCS_XutZeIhoW8XfCQDpOEovXz63dqaHpqWF80l4HYi7BhhqtGgPv9bsGlIv3dXqG0b3LMDhV6hcRawFpWizRdMdYSdCNq2CKUl8MMbmYp7R3GDvhrm" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;After login you will see the default realm &lt;cite&gt;master&lt;/cite&gt; as below -&lt;/p&gt;
&lt;img alt="https://lh3.googleusercontent.com/pzoH0ZM1x4QcdbP_MjoNYtOyCIWtrHHFg_WVBd3AwKFuSOxxakNMtbGFxPUX_k-Mb12VeCehREtpN1Bi9ME1Bp7_fs9pZbDt01_0k9S509CBTwumb5oo92eEcwjkzdNaQnbn3LOC" src="https://lh3.googleusercontent.com/pzoH0ZM1x4QcdbP_MjoNYtOyCIWtrHHFg_WVBd3AwKFuSOxxakNMtbGFxPUX_k-Mb12VeCehREtpN1Bi9ME1Bp7_fs9pZbDt01_0k9S509CBTwumb5oo92eEcwjkzdNaQnbn3LOC" style="width: 600.0px; height: 300.0px;"&gt;
&lt;/div&gt;
&lt;div class="section" id="core-concept-and-terms-of-keycloak"&gt;
&lt;h2&gt;&lt;strong&gt;Core concept and terms of keycloak -&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Realms:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A realm manages a set of users, credentials, roles, and groups. A user belongs to and logs into a realm. Realms are isolated from one another and can only manage and authenticate the users that they control.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Groups:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Groups manage groups of users. Attributes can be defined for a group. You can map roles to a group as well. Users that become members of a group inherit the attributes and role mappings that group defines.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clients:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Clients are entities that can request Keycloak to authenticate a user. Most often, clients are applications and services that want to use Keycloak to secure themselves and provide a single sign-on solution. Clients can also be entities that just want to request identity information or an access token so that they can securely invoke other services on the network that are secured by Keycloak.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Client scopes:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When a client is registered, you must define protocol mappers and role scope mappings for that client. It is often useful to store a client scope, to make creating new clients easier by sharing some common settings. This is also useful for requesting some claims or roles to be conditionally based on the value of scope parameter. Keycloak provides the concept of a client scope for this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Client role:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Clients can define roles that are specific to them. This is basically a role namespace dedicated to the client.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Identity token:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A token that provides identity information about the user. Part of the OpenID Connect specification. You can get more details about this terms here !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this blog we learn how to setup keycloak using docker, in next blog we will create an application and secure it using keycloak.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reference https:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.keycloak.org/docs/latest/getting_started/index.html"&gt;https://www.keycloak.org/docs/latest/getting_started/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.keycloak.org/docs/latest/server_admin/index.html"&gt;https://www.keycloak.org/docs/latest/server_admin/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>docker</category><category>keycloak</category><category>setup</category><guid>https://vikasontech.github.io/web/posts/setup-keycloak-with-docker/</guid><pubDate>Wed, 28 Nov 2018 15:54:46 GMT</pubDate></item></channel></rss>