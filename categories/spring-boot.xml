<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vikas Java Blogs (Posts about spring-boot)</title><link>https://vikasontech.github.io/web/</link><description></description><atom:link href="https://vikasontech.github.io/web/categories/spring-boot.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:vikason@gmail.com"&gt;Vikas Verma&lt;/a&gt; </copyright><lastBuildDate>Sat, 07 Mar 2020 16:14:51 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Add swagger to the kotlin spring </title><link>https://vikasontech.github.io/web/posts/add-swagger-to-the-kotlin-spring-boot-project/</link><dc:creator>Vikas Verma</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this short article we shall see how to configure swagger with spring webflux project. We create a project on spring initializer and then shall configure swagger.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a project on the spring boot initializer page with dependency as 'webflux' and language as 'java'&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200116/spring-initializer.png"&gt;&lt;img alt="spring initializer" src="https://vikasontech.github.io/web/images/20200116/spring-initializer.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;In order to work swagger with kotlin you need to add the following repositories in you pom.xml file.
&lt;script src="https://gist.github.com/a5dd22e084c90f46189bd5fdff5b03c6.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;        &lt;dependency&gt;
            &lt;groupid&gt;io.springfox&lt;/groupid&gt;
            &lt;artifactid&gt;springfox-swagger2&lt;/artifactid&gt;
	    &lt;version&gt;3.0.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupid&gt;io.springfox&lt;/groupid&gt;
            &lt;artifactid&gt;springfox-swagger-ui&lt;/artifactid&gt;
            &lt;version&gt;3.0.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupid&gt;io.springfox&lt;/groupid&gt;
            &lt;artifactid&gt;springfox-spring-webflux&lt;/artifactid&gt;
            &lt;version&gt;3.0.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;Since the swagger dependencyis available in another repository you need to add that repository as well in you 'pom.xml' file as below-
&lt;script src="https://gist.github.com/b53e428ae9ddfe5faeefe9882d36c89a.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;swagger1&lt;/id&gt;
            &lt;name&gt;swagger-snapshot&lt;/name&gt;
            &lt;url&gt;http://oss.jfrog.org/artifactory/oss-snapshot-local/&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;strong&gt;Setup swagger with kotlin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a class called 'SwaggerCofig' this class is responsible to configure Docket for our application as below
&lt;script src="https://gist.github.com/7fa314501ad66bc46ad2a00c04d356ec.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@Configuration
@EnableSwagger2WebFlux
class SwaggerConfig {

    @Bean
    fun api(): Docket =
            Docket(DocumentationType.SWAGGER_2)
                    .select()
                    .apis(RequestHandlerSelectors.basePackage("org.personal.finance.personalFinance.web"))
                    .paths(PathSelectors.any())
                    .build()

}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;at line no# 9 we set the path of the rest controllers, swagger will scan this package to pick the endpoints.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create a sample response object&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a simple &lt;cite&gt;LoanDetailFacade&lt;/cite&gt; that will contains the details about the loan.
&lt;script src="https://gist.github.com/538fe51780ebe36103dd5f395b5b561d.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@Document
data class LoanDetail(var _id: String,
                      var loanAmount: BigDecimal,
                      var loanCommencedDate: LocalDate,
                      var interestRate: Float,
                      var numberOfEmi: Int,
                      var emiAmount: BigDecimal)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;strong&gt;Create rest controller&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's the same as we do in spring web create some endpoints as below
&lt;script src="https://gist.github.com/9583ef4551ee379bc8f7a8f1e1fc2cb4.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;@RestController
@RequestMapping("/api/v1/loan")
class LoanDetailController () {

	@GetMapping("/detail", produces = [MediaType.TEXT_EVENT_STREAM_VALUE])
	fun getdata():Mono&lt;loandetail&gt; {
		return Mono.justOrEmpty(
				LoanDetail(_id = "dummy",
						loanAmount = BigDecimal.valueOf(100_000L),
						emiAmount = BigDecimal.valueOf(1000L),
						interestRate = 10.00F,
						loanCommencedDate = LocalDate.now(),
						numberOfEmi = 180)
		)
	}
}&lt;/loandetail&gt;&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;strong&gt;Test Application&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To run the application use below commn
mvn spring-boot:run&lt;/p&gt;
&lt;p&gt;go to the url &lt;a class="reference external" href="http://localhost:8080/swagger-ui.html"&gt;http://localhost:8080/swagger-ui.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;the swagger page should show like this&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20200116/swagger-ui.png"&gt;&lt;img alt="swagger ui example" src="https://vikasontech.github.io/web/images/20200116/swagger-ui.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The full source code is available here &lt;a class="reference external" href="https://github.com/vikasontech/kotlinWithSwagger"&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>kotlin</category><category>spring-boot</category><category>swagger</category><guid>https://vikasontech.github.io/web/posts/add-swagger-to-the-kotlin-spring-boot-project/</guid><pubDate>Thu, 16 Jan 2020 09:22:54 GMT</pubDate></item><item><title>Setup keycloak sercurity for spring boot application</title><link>https://vikasontech.github.io/web/posts/setup-keycloak-sercurity-for-spring-boot-application/</link><dc:creator>Vikas Verma</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Setup Realm and clients in keycloak&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This blog is the second part of the series of security spring boot application with keycloak. In first part we install setup in keycloak with docker you can see first part here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Keycloak: 4.5.0.Final&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pre-requisites&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keycloak should be installed in the&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Create realm&lt;/strong&gt;
A realm secures and manages security metadata for a set of users, applications, and registered oauth clients. Users can be created within a specific realm within the Administration console.
Click on Add realm button&lt;/p&gt;
&lt;img alt="https://lh4.googleusercontent.com/D-cerVc3PCbzADRwbvUsMaILQVLYIfqKJ4bZlh_XFa56ifmG1qWvEFditp8M4gtM6Pv6QZUG50uX23fLBfRvzLtdIPkX5mHjmCb9VEL4O_ONCWb6WkFZhPu8OLXAsSuZVJuq9Wu5" src="https://lh4.googleusercontent.com/D-cerVc3PCbzADRwbvUsMaILQVLYIfqKJ4bZlh_XFa56ifmG1qWvEFditp8M4gtM6Pv6QZUG50uX23fLBfRvzLtdIPkX5mHjmCb9VEL4O_ONCWb6WkFZhPu8OLXAsSuZVJuq9Wu5" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;Input the realm name&lt;/p&gt;
&lt;img alt="https://lh6.googleusercontent.com/azCQLitfsOaZfomF02gVfJ1ZCc9Gfao7O7M1ah6Y_kovcvzyYDgh69uKjhOEsP1A3b5ATyDbgyQq3_psoTmt-Cr1eWINDjlCczLjSOF6PSPhUYgiHwMv6sgLLKTJDL57r8DDYTVu" src="https://lh6.googleusercontent.com/azCQLitfsOaZfomF02gVfJ1ZCc9Gfao7O7M1ah6Y_kovcvzyYDgh69uKjhOEsP1A3b5ATyDbgyQq3_psoTmt-Cr1eWINDjlCczLjSOF6PSPhUYgiHwMv6sgLLKTJDL57r8DDYTVu" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;Once realm created you will see this screen&lt;/p&gt;
&lt;img alt="https://lh6.googleusercontent.com/qwKNyTDTv3THw_BowCu0YzeDq9TXhTUnhk0Of4juiGxo5xgZDbz03_-7N18XL8xISb6qbN9iQL5U92dVDUTD-BYHEEtLzoM_Z1azypv1WGaOPy5inFceOelpkbhutH5FVGEcaRO8" src="https://lh6.googleusercontent.com/qwKNyTDTv3THw_BowCu0YzeDq9TXhTUnhk0Of4juiGxo5xgZDbz03_-7N18XL8xISb6qbN9iQL5U92dVDUTD-BYHEEtLzoM_Z1azypv1WGaOPy5inFceOelpkbhutH5FVGEcaRO8" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;&lt;strong&gt;Create Client&lt;/strong&gt;
We need 2 clients one is for bearer-only client for the application, and another one is public client to get the access token&lt;/p&gt;
&lt;img alt="https://lh4.googleusercontent.com/D-cerVc3PCbzADRwbvUsMaILQVLYIfqKJ4bZlh_XFa56ifmG1qWvEFditp8M4gtM6Pv6QZUG50uX23fLBfRvzLtdIPkX5mHjmCb9VEL4O_ONCWb6WkFZhPu8OLXAsSuZVJuq9Wu5" src="https://lh4.googleusercontent.com/D-cerVc3PCbzADRwbvUsMaILQVLYIfqKJ4bZlh_XFa56ifmG1qWvEFditp8M4gtM6Pv6QZUG50uX23fLBfRvzLtdIPkX5mHjmCb9VEL4O_ONCWb6WkFZhPu8OLXAsSuZVJuq9Wu5" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;Create Public client&lt;/p&gt;
&lt;img alt="https://lh6.googleusercontent.com/8a4t3_kpYchQIZDBCaFr7E7WItGyIMAj-kAjJtVrpyVCMmSH0j41M01TeZrBwjXGJHXr-W_RxC28L5HLvTSyO9u7no8_vTUgSIyY05W37jODHirye8f45YHCYXnUNRHMdu52HkRk" src="https://lh6.googleusercontent.com/8a4t3_kpYchQIZDBCaFr7E7WItGyIMAj-kAjJtVrpyVCMmSH0j41M01TeZrBwjXGJHXr-W_RxC28L5HLvTSyO9u7no8_vTUgSIyY05W37jODHirye8f45YHCYXnUNRHMdu52HkRk" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;Once public client is created you will see the below screen&lt;/p&gt;
&lt;p&gt;Create Bearer only client and set the access type to beare-only&lt;/p&gt;
&lt;img alt="https://lh3.googleusercontent.com/UM20ae8FKtq17f_RCzet5nTuG42dUrgyl9gmYhi_a-jtx1XhLIypXszd7z2kbatyNSZodFfP6wdZ5QxjCjuxCAUUPaUdyp26tgxnCnmXprWkA4rUOtvPeukuQvcsaDWmoNkiBHIb" src="https://lh3.googleusercontent.com/UM20ae8FKtq17f_RCzet5nTuG42dUrgyl9gmYhi_a-jtx1XhLIypXszd7z2kbatyNSZodFfP6wdZ5QxjCjuxCAUUPaUdyp26tgxnCnmXprWkA4rUOtvPeukuQvcsaDWmoNkiBHIb" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;Add new Admin role for the application client&lt;/p&gt;
&lt;img alt="https://lh4.googleusercontent.com/D-cerVc3PCbzADRwbvUsMaILQVLYIfqKJ4bZlh_XFa56ifmG1qWvEFditp8M4gtM6Pv6QZUG50uX23fLBfRvzLtdIPkX5mHjmCb9VEL4O_ONCWb6WkFZhPu8OLXAsSuZVJuq9Wu5" src="https://lh4.googleusercontent.com/D-cerVc3PCbzADRwbvUsMaILQVLYIfqKJ4bZlh_XFa56ifmG1qWvEFditp8M4gtM6Pv6QZUG50uX23fLBfRvzLtdIPkX5mHjmCb9VEL4O_ONCWb6WkFZhPu8OLXAsSuZVJuq9Wu5" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;&lt;cite&gt;Create Admin Client&lt;/cite&gt;&lt;/p&gt;
&lt;img alt="https://lh6.googleusercontent.com/QDzHU9q-1dlYf7pAc8A9OtrPzDcAolc-yweSjKPvMic4EvwuHrQMxD3UyGrXzZugH1fPa8Ke4FyvJz0s51MEYCNXsig18RPQBbxq4nprkqmkOV39sLiuFzfrWhUNqo8-a4swXOud" src="https://lh6.googleusercontent.com/QDzHU9q-1dlYf7pAc8A9OtrPzDcAolc-yweSjKPvMic4EvwuHrQMxD3UyGrXzZugH1fPa8Ke4FyvJz0s51MEYCNXsig18RPQBbxq4nprkqmkOV39sLiuFzfrWhUNqo8-a4swXOud" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;&lt;cite&gt;Create User Client&lt;/cite&gt;&lt;/p&gt;
&lt;img alt="https://lh4.googleusercontent.com/5BfFEIYI98ndYFjp5MHrJ0PBpVNQaMVXewfowYRXKUpld6ySYhTdUXtRk_W5gPPXz4NStjji_ud4Z49oIzVhco9gJw838aGLJh4w8M9d-U3Ip80x_tJbceljy2gaPw04kLsNW7Vj" src="https://lh4.googleusercontent.com/5BfFEIYI98ndYFjp5MHrJ0PBpVNQaMVXewfowYRXKUpld6ySYhTdUXtRk_W5gPPXz4NStjji_ud4Z49oIzVhco9gJw838aGLJh4w8M9d-U3Ip80x_tJbceljy2gaPw04kLsNW7Vj" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;&lt;strong&gt;Create User for the application&lt;/strong&gt;
Create two user with role admin with and user.&lt;/p&gt;
&lt;img alt="https://lh3.googleusercontent.com/9r6HttwYY9Y9e1RNYBnbK1iEdBGYlDyni1Df49GB0ILNKvtn2OKdEPAacZxgAjNv612nBLosnMXdoDE1rhvW0f71bcYEUkbMnj0czgzY91fAbEi0ZbQBNbdeukQFBGR69YLP0skg" src="https://lh3.googleusercontent.com/9r6HttwYY9Y9e1RNYBnbK1iEdBGYlDyni1Df49GB0ILNKvtn2OKdEPAacZxgAjNv612nBLosnMXdoDE1rhvW0f71bcYEUkbMnj0czgzY91fAbEi0ZbQBNbdeukQFBGR69YLP0skg" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;&lt;cite&gt;Create admin user&lt;/cite&gt;&lt;/p&gt;
&lt;img alt="https://lh4.googleusercontent.com/48JZs2zmgmH3QuVi6MzQLRzmScnK04n8Gihns5mxzZe4s7IN21Y8PO_3UactVVzz4vkom4N3HFfj39o44RTui_YyRHNIALQaepXogo3R8F3gMoSdLVAuo2f0GZ58ebzuGxFj8IsH" src="https://lh4.googleusercontent.com/48JZs2zmgmH3QuVi6MzQLRzmScnK04n8Gihns5mxzZe4s7IN21Y8PO_3UactVVzz4vkom4N3HFfj39o44RTui_YyRHNIALQaepXogo3R8F3gMoSdLVAuo2f0GZ58ebzuGxFj8IsH" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;&lt;cite&gt;Set password&lt;/cite&gt;&lt;/p&gt;
&lt;img alt="https://lh6.googleusercontent.com/IV5zzA0Et3iqJ120u69i_FKs5N-4goRgNJCkgRin4TeLPNOxldmN2G7CNVC5gOVnkM8ZNSXfDe4WlLfQ6IvpZHuk5XGWtLcgoVEZVik7mTIM6aN1uYiy2rD_-5-nbbDURPLGMB6T" src="https://lh6.googleusercontent.com/IV5zzA0Et3iqJ120u69i_FKs5N-4goRgNJCkgRin4TeLPNOxldmN2G7CNVC5gOVnkM8ZNSXfDe4WlLfQ6IvpZHuk5XGWtLcgoVEZVik7mTIM6aN1uYiy2rD_-5-nbbDURPLGMB6T" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;Assign admin role to user vik-admin&lt;/p&gt;
&lt;img alt="https://lh3.googleusercontent.com/VbHS9yiqkju_iz9Inp18WkywhBIS-x9GQrcTZ-RS3l7dE4OlBpbWmyLwRkDqCgw0MD-D5gy0g9arDpUoWog55hCz46mIzZp9yNdEKTnuU_K4KYkYrh1J2ejcRzJrAX4Mwy_BHIzg" src="https://lh3.googleusercontent.com/VbHS9yiqkju_iz9Inp18WkywhBIS-x9GQrcTZ-RS3l7dE4OlBpbWmyLwRkDqCgw0MD-D5gy0g9arDpUoWog55hCz46mIzZp9yNdEKTnuU_K4KYkYrh1J2ejcRzJrAX4Mwy_BHIzg" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;Similarly create another user account vik-user with user role&lt;/p&gt;
&lt;img alt="https://lh6.googleusercontent.com/te3Nr_no_S9iFvTvkYFHJBA_iWuGA72vXLC08EikmbVBTbYw8byetuFnvifn8yMV1mEHfQntsw-Bu99j6SwcSgBVdN9qr2S7hajWad2jUWKEXzls5aUO95ItXr7COvkg_m8L9FbT" src="https://lh6.googleusercontent.com/te3Nr_no_S9iFvTvkYFHJBA_iWuGA72vXLC08EikmbVBTbYw8byetuFnvifn8yMV1mEHfQntsw-Bu99j6SwcSgBVdN9qr2S7hajWad2jUWKEXzls5aUO95ItXr7COvkg_m8L9FbT" style="width: 600.0px; height: 300.0px;"&gt;
&lt;img alt="https://lh5.googleusercontent.com/DcX4ETQKTKxaUFn_hQeEuA3i5wBjt2JFTJ9-qp-ziUIhnUaUaGHIdSTlliN7h6_t9UpwceTFMHUvjdFn0-hRD8QX8sou8qtuTEnIrfyPZmQI8GgXbJf_cad3tFXDMgPJLfSMiwUg" src="https://lh5.googleusercontent.com/DcX4ETQKTKxaUFn_hQeEuA3i5wBjt2JFTJ9-qp-ziUIhnUaUaGHIdSTlliN7h6_t9UpwceTFMHUvjdFn0-hRD8QX8sou8qtuTEnIrfyPZmQI8GgXbJf_cad3tFXDMgPJLfSMiwUg" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;&lt;strong&gt;Get access and refresh token&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;User below curl to get the access token&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/ee0e26e7df9e89f7bc59377024531348.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;curl -s --data "grant_type=password&amp;amp;client_id=token-backend-client&amp;amp;username=vik-admin&amp;amp;password=admin" \
    http://localhost:9001/auth/realms/backend-service/protocol/openid-connect/token | jsonpp&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="https://lh5.googleusercontent.com/-B8_F-3ei2OGuI_yTQT8ETG4_vmlFZPO5jJPqt_YvIqWIEOEFVj288LtpM6ccBfZanVSVM7j9CCN2xOtBxPIbQq3rH_u4k6DTUpoKS4E4_red7dt3eEg3d3MXMAeCIeGcMEFHA2c" src="https://lh5.googleusercontent.com/-B8_F-3ei2OGuI_yTQT8ETG4_vmlFZPO5jJPqt_YvIqWIEOEFVj288LtpM6ccBfZanVSVM7j9CCN2xOtBxPIbQq3rH_u4k6DTUpoKS4E4_red7dt3eEg3d3MXMAeCIeGcMEFHA2c" style="width: 600.0px; height: 300.0px;"&gt;
&lt;p&gt;In the next blog we will se how to secure spring boot application. You can see the blog &lt;a class="reference external" href="https://vikasontech.github.io/web/posts/secure-spring-boot-application-with-keycloak/"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>keycloak</category><category>sercurity</category><category>spring-boot</category><guid>https://vikasontech.github.io/web/posts/setup-keycloak-sercurity-for-spring-boot-application/</guid><pubDate>Fri, 30 Nov 2018 13:42:01 GMT</pubDate></item><item><title>Secure spring boot application with keycloak</title><link>https://vikasontech.github.io/web/posts/secure-spring-boot-application-with-keycloak/</link><dc:creator>Vikas Verma</dc:creator><description>&lt;div&gt;&lt;p&gt;In last blog post of this series we saw how we can configure keycloak for our application.
Now in this tutorial we
will see how we can use keycloak with spring boot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prerequisite&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Docker&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keycloak&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Spring Boo: 1.5.17.RELEASE&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java: 1.8&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keycloak: 4.0.5-Final&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="create-sample-spring-boot-application"&gt;
&lt;h2&gt;&lt;strong&gt;Create sample spring boot application&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Spring-boot-starter-web&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keycloak-spring-boot-starter&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Create rest controller class&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/70017889724bed1e3350b38a40d255ad.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;
@RestController
class SecuredResoureces {

	@Autowired
	@GetMapping("/hello/admin")
	public String helloAdmin() {
		return "hello admin!\n";
	}

	@GetMapping("/hello/user")
	public String helloUser() {
		return "hello user!\n";
	}
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;strong&gt;Secure App with keycloak&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add maven dependency for keycloak and spring security -&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;spring-boot-starter-security&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;keycloak-spring-boot-starter&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Configure keycloak server url and realms details in application.properties file&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/4cd59c38757f8f6df9eff7bdf4ff16e4.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;server.port=8081

keycloak.realm = backend-service
keycloak.bearer-only = true
keycloak.auth-server-url = http://localhost:9001/auth
keycloak.ssl-required = external
keycloak.resource = backend-application
keycloak.use-resource-role-mappings = true
keycloak.principal-attribute = preferred_username

&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;strong&gt;Configure keycloak security settings in the application&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add the blow class to configure the keycloak&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/82b136433b67a825a323e10b08c82694.js"&gt;&lt;/script&gt;
        &lt;/p&gt;&lt;noscript&gt;&lt;pre&gt;
@Configuration
@EnableWebSecurity
class KeycloakSecurityConfig extends KeycloakWebSecurityConfigurerAdapter {

    @Bean
    public GrantedAuthoritiesMapper grantedAuthoritiesMapper() {
        SimpleAuthorityMapper mapper = new SimpleAuthorityMapper();
        mapper.setConvertToUpperCase(true);
        return mapper;
    }

    @Override
    protected KeycloakAuthenticationProvider keycloakAuthenticationProvider() {
        final KeycloakAuthenticationProvider provider = super.keycloakAuthenticationProvider();
        provider.setGrantedAuthoritiesMapper(grantedAuthoritiesMapper());
        return provider;
    }

    @Override
    protected void configure(final AuthenticationManagerBuilder auth) throws Exception {
        auth.authenticationProvider(keycloakAuthenticationProvider());
    }

    @Override
    protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
        return new NullAuthenticatedSessionStrategy();
    }

    @Override
    protected void configure(final HttpSecurity http) throws Exception {
        super.configure(http);
        http
                .authorizeRequests()
                .antMatchers("/admin/*").hasRole("ADMIN")
                .antMatchers("/user/*").hasRole("USER")
                .anyRequest().permitAll();
    }

    @Bean
    KeycloakConfigResolver keycloakConfigResolver() {
        return new KeycloakSpringBootConfigResolver();
    }

    @Bean
    public FilterRegistrationBean keycloakAuthenticationProcessingFilterRegistrationBean(
            final KeycloakAuthenticationProcessingFilter filter) {
        final FilterRegistrationBean registrationBean = new FilterRegistrationBean(filter);
        registrationBean.setEnabled(false);
        return registrationBean;
    }

    @Bean
    public FilterRegistrationBean keycloakPreAuthActionsFilterRegistrationBean(
            final KeycloakPreAuthActionsFilter filter) {
        final FilterRegistrationBean registrationBean = new FilterRegistrationBean(filter);
        registrationBean.setEnabled(false);
        return registrationBean;
    }
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;cite&gt;KeycloakSecurityConfigurer.class&lt;/cite&gt; extends &lt;cite&gt;KeycloakWebSecurityConfigurerAdapter.class&lt;/cite&gt; that provide convenient base class for creating a &lt;cite&gt;WebSecurityConfigurer&lt;/cite&gt; instance secured by Keycloak.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;GrantedAuthoritiesMapper&lt;/cite&gt; is mapping interface which use to convert case of the role used in the keycloak from lower case to uppercase.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;KeycloakAuthenticationProvider&lt;/cite&gt; perform authentication process.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;NullAuthenticatedSessionStrategy&lt;/cite&gt; since we are using rest full service so we can provide null authenticated session strategy.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;KeycloakConfigResolver&lt;/cite&gt; use to tell keycloak to use spring boot configuration. Instead
use the configuration from the spring boot configuration resolver.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;keycloakAuthenticationProcessingFilterRegistrationBean&lt;/cite&gt;, &lt;cite&gt;keycloakPreAuthActionsFilterRegistrationBean&lt;/cite&gt; are used avoid re-registration of the filter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-application"&gt;
&lt;h2&gt;&lt;strong&gt;Running application&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;start the application using&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;mvn spring-boot:run&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Call the admin api without security token&lt;/cite&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20181130/img1.png"&gt;&lt;img alt="alternate text" src="https://vikasontech.github.io/web/images/20181130/img1.thumbnail.png" style="width: 600.0px; height: 300.0px;"&gt;&lt;/a&gt;
&lt;p&gt;&lt;cite&gt;Get access token for admin role&lt;/cite&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20181130/img2.png"&gt;&lt;img alt="alternate text" src="https://vikasontech.github.io/web/images/20181130/img2.thumbnail.png" style="width: 600.0px; height: 300.0px;"&gt;&lt;/a&gt;
&lt;p&gt;&lt;cite&gt;Access admin api with access token&lt;/cite&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20181130/img3.png"&gt;&lt;img alt="alternate text" src="https://vikasontech.github.io/web/images/20181130/img3.thumbnail.png" style="width: 600.0px; height: 300.0px;"&gt;&lt;/a&gt;
&lt;p&gt;&lt;cite&gt;Access user api with access token will give error because user role required for access user service.&lt;/cite&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20181130/img4.png"&gt;&lt;img alt="alternate text" src="https://vikasontech.github.io/web/images/20181130/img4.thumbnail.png" style="width: 600.0px; height: 300.0px;"&gt;&lt;/a&gt;
&lt;p&gt;&lt;cite&gt;Get access token for user role&lt;/cite&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20181130/img5.png"&gt;&lt;img alt="alternate text" src="https://vikasontech.github.io/web/images/20181130/img5.thumbnail.png" style="width: 600.0px; height: 300.0px;"&gt;&lt;/a&gt;
&lt;p&gt;&lt;cite&gt;Access user service&lt;/cite&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://vikasontech.github.io/web/images/20181130/img6.png"&gt;&lt;img alt="alternate text" src="https://vikasontech.github.io/web/images/20181130/img6.thumbnail.png" style="width: 600.0px; height: 300.0px;"&gt;&lt;/a&gt;
&lt;p&gt;You can get the source code from &lt;a class="reference external" href="http://bit.ly/2SkdMwL"&gt;Bitbucket&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>keycloak</category><category>security</category><category>spring-boot</category><guid>https://vikasontech.github.io/web/posts/secure-spring-boot-application-with-keycloak/</guid><pubDate>Fri, 30 Nov 2018 11:19:12 GMT</pubDate></item></channel></rss>